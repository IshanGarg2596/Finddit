{"version":3,"sources":["RedditAPI.js","index.js"],"names":["search","searchTerm","searchLimit","sortBy","fetch","then","res","json","data","children","map","catch","err","console","log","searchForm","document","querySelector","searchInput","showMessage","message","className","div","createElement","appendChild","createTextNode","searchContainer","insertBefore","setTimeout","remove","truncateText","text","limit","shortened","indexOf","substring","addEventListener","e","preventDefault","value","results","output","forEach","post","image","preview","images","source","url","title","selftext","subreddit","score","innerHTML"],"mappings":";AAAc,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACVA,OAAQ,SAASC,EAAYC,EAAaC,GAC/BC,OAAAA,MAA8CH,wCAAAA,OAAAA,EAAmBE,UAAAA,OAAAA,EAAgBD,WAAAA,OAAAA,IACvFG,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAChBF,KAAK,SAAAG,GAAQA,OAAAA,EAAKA,KAAKC,SAASC,IAAI,SAAAF,GAAQA,OAAAA,EAAKA,SACjDG,MAAM,SAAAC,GAAOC,OAAAA,QAAQC,IAAIF,OALpB,QAAA,QAAA;;ACqFb,aArFD,IAAA,EAAA,EAAA,QAAA,gBAqFC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnFD,IAAMG,EAAaC,SAASC,cAAc,gBACpCC,EAAcF,SAASC,cAAc,iBAwD3C,SAASE,EAAYC,EAASC,GAEpBC,IAAAA,EAAMN,SAASO,cAAc,OAEnCD,EAAID,UAAqBA,SAAAA,OAAAA,GAEzBC,EAAIE,YAAYR,SAASS,eAAeL,IAElCM,IAAAA,EAAkBV,SAASC,cAAc,qBAEzCjB,EAASgB,SAASC,cAAc,WAGtCS,EAAgBC,aAAaL,EAAKtB,GAGlC4B,WAAW,WACPZ,SAASC,cAAc,UAAUY,UAClC,KAIP,SAASC,EAAaC,EAAMC,GAClBC,IAAAA,EAAYF,EAAKG,QAAQ,IAAKF,GACjCC,OAAe,IAAfA,EAAyBF,EACrBA,EAAKI,UAAU,EAAEF,GA7E5BlB,EAAWqB,iBAAiB,SAAU,SAACC,GACnCA,EAAEC,iBAGIrC,IAAAA,EAAaiB,EAAYqB,MAGzBpC,EAASa,SAASC,cAAc,gCAAgCsB,MAGhErC,EAAcc,SAASC,cAAc,UAAUsB,MAGnC,KAAftC,GAECkB,EAAY,2BAA4B,gBAI5CD,EAAYqB,MAAQ,IAGbvC,EAAAA,QAAAA,OAAOC,EAAYC,EAAaC,GACtCE,KAAK,SAAAmC,GACEC,IAAAA,EAAS,6BACbD,EAAQE,QAAQ,SAAAC,GAENC,IAAAA,EAAQD,EAAKE,QAAUF,EAAKE,QAAQC,OAAO,GAAGC,OAAOC,IAAM,wEAEjEP,GAEgBG,+DAAAA,OAAAA,EAEaD,uHAAAA,OAAAA,EAAKM,MACPnB,gDAAAA,OAAAA,EAAaa,EAAKO,SAAU,KACxCP,mCAAAA,OAAAA,EAAKK,IAEiCL,kIAAAA,OAAAA,EAAKQ,UACdR,mEAAAA,OAAAA,EAAKS,MATjD,uEAcJX,GAAU,SAEVzB,SAASC,cAAc,YAAYoC,UAAYZ","file":"Finddit.df95ab6d.js","sourceRoot":"..","sourcesContent":["export default{\n    search: function(searchTerm, searchLimit, sortBy){\n        return fetch(`https://www.reddit.com/search.json?q=${searchTerm}&sort=${sortBy}&limit=${searchLimit}`)\n        .then(res => res.json())\n        .then(data => data.data.children.map(data => data.data))\n        .catch(err => console.log(err));\n    }\n};","import reddit from './RedditAPI';\n\nconst searchForm = document.querySelector('#search-form');\nconst searchInput = document.querySelector('#search-input');\n\n\n// Form Event Listner\nsearchForm.addEventListener('submit', (e) =>{\n    e.preventDefault();\n\n    // Get search term\n    const searchTerm = searchInput.value;\n\n    // Get sort\n    const sortBy = document.querySelector('input[name=\"sortby\"]:checked').value;\n\n    // Get limit\n    const searchLimit = document.querySelector('#limit').value;\n\n    // Check input \n    if(searchTerm === '' ){\n        // Show message \n        showMessage('Please add a search term', 'alert-danger');\n    }\n\n    // Clear input\n    searchInput.value = \" \";\n\n    // Search Reddit\n    reddit.search(searchTerm, searchLimit, sortBy)\n    .then(results => {\n        let output = '<div class=\"card-columns\">';\n        results.forEach(post => {\n            //Check for image\n            const image = post.preview ? post.preview.images[0].source.url : 'https://rdwgroup.com/wp-content/uploads/2018/10/reddit2-800x450-1.png';\n\n            output += `\n            <div class=\"card\">\n                <img src=\"${image}\" class=\"card-img-top\" alt=\"...\">\n                <div class=\"card-body\">\n                <h5 class=\"card-title\">${post.title}</h5>\n                <p class=\"card-text\">${truncateText(post.selftext, 100)}</p>\n                <a href=\"${post.url}\" class=\"btn btn-primary\">Read More</a>\n                <hr>\n                <span class=\"badge badge-secondary\">Subreddit: ${post.subreddit}</span>\n                <span class=\"badge badge-dark\">Score: ${post.score}</span>\n                </div>\n            </div>\n            `;\n        });\n        output += '</div>';\n\n        document.querySelector('#results').innerHTML = output;\n    });\n\n});\n\n\n//Show Message\nfunction showMessage(message, className){\n    // Create div\n    const div = document.createElement('div');\n    // Add Classes\n    div.className = `alert ${className}`;\n    // Add text\n    div.appendChild(document.createTextNode(message));\n    // Get parent \n    const searchContainer = document.querySelector('#search-container');\n    // Get search\n    const search = document.querySelector('#search');\n\n    // Insert message\n    searchContainer.insertBefore(div, search);\n\n    // Timeout Alert\n    setTimeout(() => {\n        document.querySelector('.alert').remove();\n    }, 2000);\n}\n\n//Truncate text\nfunction truncateText(text, limit){\n    const shortened = text.indexOf(' ', limit);\n    if(shortened === -1) return text;\n    return text.substring(0,shortened);\n}"]}